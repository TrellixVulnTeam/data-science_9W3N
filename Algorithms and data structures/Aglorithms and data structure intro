


Data structures organize storage in computers so that we can efficiently access, change and optimize the data to improve efficiency in for the needs of the specific problem. Different structuresmay require a different solutions and structure types. Some of the structures come built-in in Python like a list and a set. However, these structure types may not be the most efficient in dealing with certain problems. So we may have to create or define our own structure to tackle the problem to improve efficiency. In the below, we will list some of the classic data strucute types and its strengths and weaknesses as a tradeoff.

1. List: 
A list (or an array ) is an ordered sequence of items with an incrementing index. Examples would be numpy array and python lists. Conviniently, we can call any element by simply calling the index number.But the problem with lists is that if you remove one entry, the it has to be reindexed to from the very beggining. This would be called O(n) with O with being a big O notation.   

2. Set: 
A set is not ordered and cannot contain duplicates. 

3. Linked lists: 
Here we preserve the order of the list without the index attached to it. However, each entry is linked to the next entry. Linked lists can be either singly or a doubly linked where singly link points only forward whereas doubly is pointed forward and backward. 

One advantage is deletion, which is O(n) for lists but only O(1) for linked lists. This is because we only update the pointer (or pointers in a doubly linked list) that was pointing to the removed item rather updating the index of every item that follows.
But if you want to access an entry, the efficiency is O(n) because we always have to start at the first item and move through the chain until we get to where we want. There is no fast way for us to go to a specific place since there is no index for us to reference. So if you want fast access, list is your choice, while for deleting, updating, linkedlist is your choice!


In data type, we've used Node class to create linked lists as python doesn't implement linked lists.



4. Queue: 
Works in a FiFO fashion: first in first out and last in last out. It is open ended in both ends. One end is always used to insert data (enqueue) and the other is used to remove data (dequeue).

It is ordered like lists, but you'll only ever touch elements at one end. All elements get inserted at the "end" (enqueue) and removed from the "beginning" (or head) of the queue(dequeue -). You can find out how many elements are in the queue, but you can't find out what, say, the "third" element is. You'll see it when you get there. In other words, in accessing and searching, we'd fall into O(n) efficiency.

It is used when things donâ€™t have to be processed immediately, but have to be processed in First In First Out order. 

Usage examples would be 1) When a resource is shared among multiple consumers, such as CPU scheduling, Disk Scheduling. 2) When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc.

5. Stacks:  Last-in-First-Out (LIFO) principle. It uses Push to add at the top of the stack and pop to remove it.
