-> not a version control system()

sudo apt-get install git = installation
commit = making snapshot of a file

git init = initialize empty git repository => almost never need it
git add <file > =add files to the repo
git push = local to github => will ask for password (or with ssh no password)
git pull = pull latest change from github(remote repo) when someone in the team makes a change and u want the latest version
git clone = copy remote repo(from github) into your current folder

1. create files: a) touch index.html => created empty index html file in my current folder
                 b) touch app.js
2. git init(within the same folder)  => creates an invisible .git file
                                     => can start using git command now
3. git$ git config --global email.name 'Micah@investanalyze.com' = creates name and user
4. git add index.html = let' add index.html file to our git repo (index.html is in the staging area now)
                      => git rm --cached index.html (will remove file from staging area)

   git add *.html = will add all the html files into staging area
   git add .  = will add everything!
   if you modify a file, then always make sure git add . it afterwards!
5. git commit = # is a comment
6. :wq
   control X
   shift Y
   ENTER

7. git add . => make sure u use it after every changes in the file

8. git commit -m "modified app.js"  => will skip everything from 6-7 and much better commit
9. clear
10. When you don't want somefiles to be included in the git file: 
 - try using: git rm -r --cached .
  a) touch .gitignore  => created gitignore file
  b) touch log.txt     => created log file. usually u don't to include the log file
  c) open(click on) .gitignore file and type in log.txt or /dir1 (entire directory)
                                      *.txt => all the text files will not be included
  d) git add .
  e) git status => will not show you log.txt

11. git branch can be created without making changes to the master branch.
   git branch login

12. if you see new file in git status: then commit it. 
13. git checkout login = switching to the login branch
    make a change in the index.html file for example
14. touch login.html => for example
    git add .
    git commit -m 'login change'
    clear

15. git checkout master => switches back to master and login.html file is gone
                        => changes you made in index.html under login branch is also gone
    (git checkout login => switches back to login branch)
16. git merge login =>   to merge the changes you made in the login with the master => 


17. git remote => gives me all the remote repos and there' none. Let' add my github account to it.
    git remote add origin git@github.com:pj4269/sample.git  => adds it. 
    git push -u origin master                               => pushes your local code to the github
    git pull -u origin master                               => pulls your code from github

other: 
18. github key generation a) : cd ~/.ssh. => should see .pub file => if not create keys:  ssh-keygen -t rsa -C "your_email@example.com".
    b) copy the key from key.pub file and paste it on your githubs 'Account Settings > SSH Keys'
    c) push again



ref: https://www.youtube.com/watch?v=SWYqp7iY_Tc
